// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/07/2020 20:26:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          semaforo_contador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module semaforo_contador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock19;
// wires                                               
wire SA1;
wire SA2;
wire SA3;
wire SB1;
wire SB2;
wire SB3;

// assign statements (if any)                          
semaforo_contador i1 (
// port map - connection between master ports and signals/registers   
	.clock19(clock19),
	.SA1(SA1),
	.SA2(SA2),
	.SA3(SA3),
	.SB1(SB1),
	.SB2(SB2),
	.SB3(SB3)
);
initial 
begin 
#1000000 $finish;
end 

// clock19
initial
begin
	clock19 = 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
	clock19 = #20000 1'b1;
	clock19 = #20000 1'b0;
end 
endmodule

